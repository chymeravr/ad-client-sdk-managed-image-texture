//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net;
using co.chimeralabs.ads.managed.Models;
using co.chimeralabs.ads.managed.Utils;

namespace co.chimeralabs.ads.managed.Internal
{
	public class TextureData
	{
        private String textureImageUrl;
        //private byte[] data;
        private ITexture textureObject;
        private InternalAdListener adListener;
        
        public TextureData(String textureImageUrl, InternalAdListener adListener){
            this.textureImageUrl = textureImageUrl;
            this.adListener = adListener;
        }
        public void DownloadTextureData()
        {
            WebClient imageLoadWebClient = new WebClient();
            imageLoadWebClient.DownloadDataCompleted += OnTextureDataDownload;
            Uri uri = new Uri(textureImageUrl);
            try
            {
                imageLoadWebClient.DownloadDataAsync(uri);
            }
            catch (System.Net.WebException excp)
            {
                String errorMessage = "Web Exception";
                InternalAdLoadFailedArgs args = new InternalAdLoadFailedArgs(1, errorMessage);
                adListener.OnAdLoadFailed(args);
                Console.WriteLine("Exception caught: {0}", excp);
            }
            catch (ArgumentNullException excp)
            {
                String errorMessage = "Null arguement exception";
                InternalAdLoadFailedArgs args = new InternalAdLoadFailedArgs(1, errorMessage);
                adListener.OnAdLoadFailed(args);
                Console.WriteLine("Exception caught: {0}", excp);
            }
        }
        private void OnTextureDataDownload(System.Object sender, DownloadDataCompletedEventArgs e)
        {
            Logger.Log(this, "OnImageDownloaded: Entered");
            if (e.Cancelled)
            {
                String errorMesage = "Image Load. Request Cancelled.";
                InternalAdLoadFailedArgs args = new InternalAdLoadFailedArgs(1, errorMesage);
                adListener.OnAdLoadFailed(args);
                //AnalyticsWebManager.Push(new AdEventDTO(this.adUnitId, AdEventDTO.EventType.AdResourceDownloadFailed, errorMesage), AnalyticsWebWrapperDTO.Action.AdEvent, AnalyticsWebManager.PRIORITY.HIGH);
                return;
            }
            if (e.Error != null)
            {
                String errorMessage = e.Error.Message;
                InternalAdLoadFailedArgs args = new InternalAdLoadFailedArgs(2, errorMessage);
                adListener.OnAdLoadFailed(args);
                //AnalyticsWebManager.Push(new AdEventDTO(this.adUnitId, AdEventDTO.EventType.AdResourceDownloadFailed, errorMessage), AnalyticsWebWrapperDTO.Action.AdEvent, AnalyticsWebManager.PRIORITY.HIGH);
                return;
            }
            byte[] data = e.Result;
            IPlatformObjectsFactory factory = PlatformObjectsFactoryHolder.GetFactory();
            this.textureObject = factory.GetTextureObject();
            bool result = this.textureObject.CreateTextureObject(data);
            if (!result) //client couldn't create the texture object
            {

            }
            adListener.OnAdLoaded(this);
            //AnalyticsWebManager.Push(new AdEventDTO(this.adUnitId, AdEventDTO.EventType.AdResourceDownloadSuccess, ""), AnalyticsWebWrapperDTO.Action.AdEvent, AnalyticsWebManager.PRIORITY.HIGH);
        }
        public ITexture GetTexture()
        {
            return this.textureObject;
        }
    }
}
